<style>

.reveal .slides > sectionx {
    top: -70%;
}

.reveal pre code.r {background-color: #ccF}

.section .reveal li {color:white}
.section .reveal em {font-weight: bold; font-style: "none"}

</style>




Introduction to R
========================================================
author: Wouter van Atteveldt
date: 2016 Amsterdam Summer School

Motivational Example
======
type:section 

Introduction to R
===
type:section 

Course Components
===

+ Two sessions:
  + Introduction to R
  + Organizing and Transforming Data
+ Lecture & Interactive sessions
  + Please interrupt me!
+ Hands-on sessions
+ http://vanatteveldt.com
  + Slides, hand-outs, data

What is R?
===

+ Programming language
+ Statistics Toolkit
+ Open Source
+ Community driven
  + Packages/libraries
  + Including many text analysis libraries
  
Cathedral and Bazar
===

<img src="cath_bazar.jpg">
  
The R Ecosystem
===

+ R
+ RStudio
  + RMarkdown / RPresentation
+ Packages
  + CRAN
  + Github


Installing and using packages
===

```{r, eval=F}
install.packages("plyr")
library(plyr)
plyr::rename

devtools::install_github("amcat/amcat-r")
```

Data types: vectors
===

```{r}
x = 12
class(x)
x = c(1, 2, 3)
class(x)
x = "a text"
class(x)
```

Data Frames
===

```{r}
df = data.frame(id=1:3, age=c(14, 18, 24), 
          name=c("Mary", "John", "Luke"))
df
class(df)
```

Selecting a column
===

```{r}
df$age
df[["age"]]
class(df$age)
class(df$name)
```

Useful functions
===

Data frames:

```{r, eval=F}
colnames(df)
head(df)
tail(df)
nrow(df)
ncol(df)
summary(df)
```

Vectors:

```{r, eval=F}
mean(df$age)
length(df$age)
```


Other data types
===

+ Data frame:
  + Rectangular data frame
  + Columns vectors of same length
    + (vetor always has one type)
+ List:
  + Contain anything (inc data frames, lists)
  + Elements arbitrary type
+ Matrix:
  + Rectangular
  + All cells same (primitive) type
  
  
Finding help (and packages)
===

+ Ask a friend!
+ Built-in documentation
  + CRAN package vignettes
+ Task views
+ Google (sorry...)

Hands-on 1
===
type:section

Handouts: 
+ R as a calculator
+ Playing with data in R


Organizing and Transforming Data
===
type:section 


Organizing Data in R
===
type: section
  

Subsetting

Recoding & Renaming columns

Ordering



Subsetting
===

```{r}
df[1:2, 1:2]
df[df$id %% 2 == 1, ]
df[, c("id", "name")]
```

Subsetting: `subset` function
===
```{r}
subset(df, id == 1)
subset(df, id >1 & age < 20)
```

Recoding columns
===
  
```{r}
df2 = df
df2$age2 = df2$age + df2$id
df2$age[df2$id == 1] = NA
df2$id = NULL
df2$old = df2$age > 20
df2$agecat = 
  ifelse(df2$age > 20, "Old", "Young")
df2
```

Text columns
===

+ `character` vs `factor`

```{r}
df2=df
df2$name = as.character(df2$name)
df2$name[df2$id != 1] = 
    paste("Mr.", df2$name[df2$id != 1])
df2$name = toupper(df2$name)
df2$name = gsub("\\.\\s*", "_", df2$name)
df2[grepl("mr", df2$name, ignore.case = T), ]
```

Renaming columns
===

```{r}
df2 = df
colnames(df2) = c("ID", "AGE", "NAME")
colnames(df2)[2] = "leeftijd"
df2 = plyr::rename(df2, c("NAME"="naam"))
df2
```
  
Ordering
====

```{r}
df[order(df$age), ]
plyr::arrange(df, -age)
```

Accessing elements
====

+ Data frame
  + Select one column: `df$col`, ` df[["col"]]`, 
  + Select columns: `df[c("col1" ,"col2")]`
  + Subset: `df[rows, columns]`
+ List:
  + Select one element: `l$el`, ` l[["el"]]`, `l[[1]]` 
  + Select columns: `l[[1:3]]`
+ Matrix:
  + All cells same type
  + Subset: `m[rows, columns]`




Transforming data
====
type:section

Combining data

Reshaping data

Combining data
=====

```{r, echo=F}
df = data.frame(id=1:3, age=c(14, 18, 24), 
          name=c("Mary", "John", "Luke"))
```

```{r}
cbind(df, country=c("nl", "uk", "uk"))
rbind(df, c(id=1, age=2, name="Mary"))
```

Merging data
===

```{r}
countries = data.frame(id=1:2, country=c("nl", "uk"))
merge(df, countries)
merge(df, countries, all=T)
```

Merging data
===

```{r, eval=F}
merge(data1, data2)
merge(data1, data2, by="id")
merge(data1, data2, by.x="id", by.y="ID")
merge(data1, data2, by="id", all=T)
merge(data1, data2, by="id", all.x=T)
```

Reshaping data
===

+ `reshape2` package:
  + `melt`: wide to long
  + `dcast`: long to wide (pivot table) 

Melting data
===

```{r}
wide = data.frame(id=1:3, 
  group=c("a","a","b"), 
  width=c(100, 110, 120), 
  height=c(50, 100, 150))
wide
```

Melting data
===

```{r}
library(reshape2)
long = melt(wide, id.vars=c("id", "group"))
long
```


Casting data
===

```{r}
dcast(long, id + group ~ variable, value.var="value")
```

Casting data: aggregation
===

```{r}
dcast(long, group ~ variable, value.var = "value", fun.aggregate = max)
dcast(long, id ~., value.var = "value", fun.aggregate = mean)
```

Aggregation with `aggregate`
===

```{r}
aggregate(long["value"], long["group"], max)
```

`aggregate` vs `dcast`
===

Aggregate
+ One aggregation function
+ Multiple value columns
+ Groups go in rows (long format)
+ Specify with column subsets

Cast
+ One aggregation function
+ One value column
+ Groups go in rows or columns
+ Specify with formula (`rows ~ columns`)


Simple statistics
===

Vector properties

```{r, eval=F}
mean(x)
sd(x)
sum(x)
```

Basic tests

```{r, eval=F}
t.test(wide, width ~ group)
t.test(wide$width, wide$height, paired=T)
cor.test(wide$width, wide$height)
m = lm(long, width ~ group + height)
summary(m)
```




Hands-on 2
===
type:section

Handouts: 
+ Organizing data
+ Transforming Data


